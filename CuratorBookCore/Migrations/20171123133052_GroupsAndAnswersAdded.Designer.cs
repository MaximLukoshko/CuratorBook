// <auto-generated />
using CuratorBook.Models;
using CuratorBookCore.Data.Tables;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CuratorBookCore.Migrations
{
    [DbContext(typeof(CuratorBookDbContext))]
    [Migration("20171123133052_GroupsAndAnswersAdded")]
    partial class GroupsAndAnswersAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CuratorBookCore.Data.Tables.Answers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FormId");

                    b.Property<int>("GroupId");

                    b.Property<bool>("ISHidden");

                    b.Property<bool>("IsFreezed");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("CuratorBookCore.Data.Tables.Controls", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Controls");
                });

            modelBuilder.Entity("CuratorBookCore.Data.Tables.Forms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(150);

                    b.Property<int>("PageId");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.ToTable("Forms");
                });

            modelBuilder.Entity("CuratorBookCore.Data.Tables.FormsControls", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AnswerId")
                        .HasMaxLength(50);

                    b.Property<int>("ControlId");

                    b.Property<int>("FormId");

                    b.Property<int?>("FormsId");

                    b.HasKey("Id");

                    b.HasIndex("ControlId");

                    b.HasIndex("FormsId");

                    b.ToTable("FormsControls");
                });

            modelBuilder.Entity("CuratorBookCore.Data.Tables.Groups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Course");

                    b.Property<string>("GroupCode")
                        .HasMaxLength(10);

                    b.Property<int>("SpecialityId");

                    b.HasKey("Id");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("CuratorBookCore.Data.Tables.Pages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("CuratorBookCore.Data.Tables.PagesRights", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PageId");

                    b.Property<int>("RightId");

                    b.HasKey("Id");

                    b.HasIndex("RightId");

                    b.ToTable("PagesRights");
                });

            modelBuilder.Entity("CuratorBookCore.Data.Tables.Rights", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Rights");
                });

            modelBuilder.Entity("CuratorBookCore.Data.Tables.Specialities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .HasMaxLength(70);

                    b.HasKey("Id");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("CuratorBookCore.Data.Tables.Forms", b =>
                {
                    b.HasOne("CuratorBookCore.Data.Tables.Pages", "Page")
                        .WithMany("Forms")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CuratorBookCore.Data.Tables.FormsControls", b =>
                {
                    b.HasOne("CuratorBookCore.Data.Tables.Controls", "Type")
                        .WithMany()
                        .HasForeignKey("ControlId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CuratorBookCore.Data.Tables.Forms")
                        .WithMany("Controls")
                        .HasForeignKey("FormsId");
                });

            modelBuilder.Entity("CuratorBookCore.Data.Tables.Groups", b =>
                {
                    b.HasOne("CuratorBookCore.Data.Tables.Specialities", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CuratorBookCore.Data.Tables.PagesRights", b =>
                {
                    b.HasOne("CuratorBookCore.Data.Tables.Rights", "Right")
                        .WithMany()
                        .HasForeignKey("RightId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
